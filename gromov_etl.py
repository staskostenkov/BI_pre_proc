#!/usr/bin/env python
# coding: utf-8

# In[3]:


get_ipython().run_cell_magic('time', '', "import pandas as pd\nimport numpy as np\n\n# data loading\ncountries = data = pd.read_csv('country_nationality.csv', nrows=5*10**6)\ndata = pd.read_csv('2people_wiki.csv', nrows=5*10**6)\n\n# data filtering for columns\ncountries = countries[['Country', 'Nationality']]\ncountries['Nationality'] = countries['Nationality'].str.lower()\ndata = data[['Name', 'Article',]]\n\n# control null-values\nprint('countries null', countries.isnull().any)\nprint('data null', data.isnull().any)\n\n# data viewing\n#data = data.drop([0])\nprit(data[:3])\nprint(countries[:3])\n\n# manth list\nmonths = ['january',\n        'february',\n        'march',\n        'april',\n        'may',\n        'june',\n        'july',\n        'augest',\n        'september',\n        'november',\n        'december']\n\n# month dictionary for maping\nmonths_dict = {\n    'january'  : 'Jan',\n    'february' : 'Feb',\n    'march'    : 'Mar',\n    'april'    : 'Apr',\n    'may'      : 'May',\n    'june'     : 'Jun',\n    'july'     : 'Jul',\n    'augest'   : 'Aug',\n    'september': 'Sep',\n    'october'  : 'Oct',\n    'november' : 'Nov',\n    'december' : 'Dec'\n}\n\n# creating country dictionary for maping\nnationality_dict = dict((key, value) for (key, value) in zip(list(countries['Nationality']), \n                                                             list(countries['Country'])))\n# articles split to words\naa = data['Article'].str.split()\n# control \nprint(aa.shape[0])\n\n# new columns initialisation\ndata['day'] = 0\ndata['month'] = ''\ndata['year'] = 0\ndata['status'] = ''\ndata['Gender'] = ''\ndata['Nationality'] = ''\ndata['Country'] = ''\n\n\nfor ii in range(aa.shape[0]):\n    try:\n        if 'born' in aa.iloc[ii]:\n            iin = aa.iloc[ii].index('born')\n            if aa.iloc[ii][iin+1] == 'on':\n                day = aa.iloc[ii][iin+3]\n                month = aa.iloc[ii][iin+2]\n                year = aa.iloc[ii][iin+4]\n            else:\n                day = aa.iloc[ii][iin+1]\n                month = aa.iloc[ii][iin+2]\n                year = aa.iloc[ii][iin+3]\n        if 'she' in aa.iloc[ii]:\n            gender = 'Female'\n        if 'he' in aa.iloc[ii]:\n            gender = 'Male'\n\n            if (month not in months) & (day in months):\n                month, day = day, month\n\n            try:\n                year = int(year)\n            except ValueError:\n                year = 3999\n\n            try:\n                day = int(day)\n            except ValueError:\n                day = 77\n\n            if day >100:\n                    year = day\n                    day = 0\n\n            # vars recording to dataframe\n            if month in months:\n                data['day'].iloc[ii] = day\n                data['month'].iloc[ii] = month\n                data['year'].iloc[ii] = year\n                data['Gender'].iloc[ii] = gender\n                data['status'].iloc[ii] = 'good'\n\n            # nationality finding, distance checking\n            try:\n                min_index_number = 10000\n                born_index_number = aa.iloc[ii].index('born')\n                for nationality in list(countries.Nationality):\n                    if nationality in data['Article'].iloc[ii]:\n                        if (aa.iloc[ii].index(nationality)-born_index_number)<min_index_number:\n                            min_index_number = aa.iloc[ii].index(nationality)-born_index_number\n                            my_nationality = nationality\n                data['Nationality'].iloc[ii] = my_nationality\n                #data['Country'].iloc[ii] = data['Nationality'].iloc[ii].map(nationality_dict)\n            except ValueError:\n                pass\n            \n            print(ii, True, iin, month, day, year)\n    except IndexError:\n        pass\n    \ndata['Date'] = ''\n# month maping to a short format\ndata['Date'] = data['month'].map(months_dict)\n# data format creating\ndata['Date'] = data['day'].astype(str) +'-'+data['Date']+'-'+data['year'].astype(str)\n\n# not-null data filtering\ndata1 = data[data.year>0]\n# nationality maping to country\ndata1['Country'] = data1['Nationality'].map(nationality_dict)\n\n# data saveing to a file\ndata1[['Name','day','month','year','Gender', 'Country', 'Date']].to_csv('out_data.csv')\ndata1[:6]")


# In[ ]:




